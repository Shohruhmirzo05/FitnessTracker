extends ../layout

block content
  style.
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      animation: fadeInDown 0.8s ease-out;
    }
    .page-title {
      color: #2c3e50;
      font-size: 2.5rem;
      margin: 0;
    }
    .action-buttons {
      display: flex;
      gap: 1rem;
    }
    .btn {
      padding: 0.75rem 1.5rem;
      border-radius: 0.5rem;
      font-weight: 500;
      text-decoration: none;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    .btn-primary {
      background: #3498db;
      color: white;
    }
    .btn-primary:hover {
      background: #2980b9;
      transform: translateY(-2px);
    }
    .btn-danger {
      background: #e74c3c;
      color: white;
    }
    .btn-danger:hover {
      background: #c0392b;
      transform: translateY(-2px);
    }
    .btn-secondary {
      background: #95a5a6;
      color: white;
    }
    .btn-secondary:hover {
      background: #7f8c8d;
      transform: translateY(-2px);
    }
    .details-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-bottom: 2rem;
    }
    .main-content {
      animation: fadeIn 0.8s ease-out;
    }
    .goal-card {
      background: white;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      margin-bottom: 2rem;
    }
    .goal-description {
      color: #7f8c8d;
      font-size: 1.2rem;
      line-height: 1.6;
      margin-bottom: 2rem;
    }
    .details-grid-inner {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
    }
    .details-section {
      background: #f8f9fa;
      border-radius: 1rem;
      padding: 1.5rem;
    }
    .details-title {
      color: #2c3e50;
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }
    .details-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .details-item {
      padding: 0.75rem 0;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .details-item:last-child {
      border-bottom: none;
    }
    .details-label {
      color: #7f8c8d;
      font-weight: 500;
    }
    .details-value {
      color: #2c3e50;
      font-weight: 600;
    }
    .progress-container {
      background: #f0f0f0;
      border-radius: 1rem;
      height: 1rem;
      margin: 1.5rem 0;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, #3498db, #2ecc71);
      border-radius: 1rem;
      transition: width 1s ease-out;
      position: relative;
    }
    .progress-text {
      position: absolute;
      right: 0;
      top: -1.5rem;
      font-size: 0.9rem;
      color: #7f8c8d;
    }
    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.9rem;
      font-weight: 500;
    }
    .status-completed {
      background: #2ecc71;
      color: white;
    }
    .status-overdue {
      background: #e74c3c;
      color: white;
    }
    .status-progress {
      background: #3498db;
      color: white;
    }
    .alert {
      padding: 1rem;
      border-radius: 0.5rem;
      margin: 1rem 0;
    }
    .alert-success {
      background: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }
    .alert-info {
      background: #d1ecf1;
      color: #0c5460;
      border-left: 4px solid #17a2b8;
    }
    .alert-warning {
      background: #fff3cd;
      color: #856404;
      border-left: 4px solid #ffc107;
    }
    .update-form {
      background: white;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 2rem;
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      color: #2c3e50;
      font-weight: 500;
    }
    .form-input {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid #e0e0e0;
      border-radius: 0.5rem;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    .form-input:focus {
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
      outline: none;
    }
    .summary-card {
      background: white;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      animation: fadeIn 0.8s ease-out;
    }
    .summary-header {
      background: #2c3e50;
      color: white;
      padding: 1.5rem;
    }
    .summary-title {
      margin: 0;
      font-size: 1.5rem;
    }
    .summary-body {
      padding: 1.5rem;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    @media (max-width: 768px) {
      .details-grid {
        grid-template-columns: 1fr;
      }
      .page-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }
      .action-buttons {
        width: 100%;
        justify-content: center;
      }
    }

  div.page-header
    h1.page-title= goal.title
    div.action-buttons
      a.btn.btn-primary(href=`/goals/${goal._id}/edit`) Edit Goal
      form(action=`/goals/${goal._id}?_method=DELETE`, method="POST", onsubmit="return confirm('Are you sure you want to delete this goal?')")
        button.btn.btn-danger(type="submit") Delete Goal
  
  div.details-grid
    div.main-content
      div.goal-card
        if goal.description
          p.goal-description= goal.description
        
        div.details-grid-inner
          div.details-section
            h3.details-title Goal Details
            ul.details-list
              li.details-item
                span.details-label Type
                span.details-value= goal.goalType
              li.details-item
                span.details-label Target
                span.details-value #{goal.targetValue} #{goal.unit}
              li.details-item
                span.details-label Start Date
                span.details-value= new Date(goal.startDate).toLocaleDateString()
              li.details-item
                span.details-label End Date
                span.details-value= new Date(goal.endDate).toLocaleDateString()
                
          div.details-section
            h3.details-title Progress
            div.progress-container
              - var progressWidth = goal.progress > 100 ? 100 : goal.progress
              div.progress-bar(style=`width: ${progressWidth}%`)
                span.progress-text #{Math.round(goal.progress)}%
            
            p.details-item
              span.details-label Current
              span.details-value #{goal.currentValue} #{goal.unit}
              
            if goal.completed
              div.alert.alert-success
                strong Congratulations! 
                | You've completed this goal.
            else
              - var daysLeft = Math.ceil((new Date(goal.endDate) - new Date()) / (1000 * 60 * 60 * 24))
              if daysLeft > 0
                div.alert.alert-info
                  strong #{daysLeft} days left 
                  | to reach your goal.
              else
                div.alert.alert-warning
                  strong Goal overdue. 
                  | The deadline has passed.
      
      div.update-form
        h3.details-title Update Progress
        form(action=`/goals/${goal._id}?_method=PUT`, method="POST")
          div.form-group
            label.form-label(for="currentValue") Current Value (#{goal.unit})
            input.form-input(type="number", id="currentValue", name="currentValue", value=goal.currentValue, step="any", required)
          
          input(type="hidden", name="title", value=goal.title)
          input(type="hidden", name="description", value=goal.description)
          input(type="hidden", name="goalType", value=goal.goalType)
          input(type="hidden", name="targetValue", value=goal.targetValue)
          input(type="hidden", name="unit", value=goal.unit)
          input(type="hidden", name="startDate", value=goal.startDate.toISOString().slice(0, 10))
          input(type="hidden", name="endDate", value=goal.endDate.toISOString().slice(0, 10))
          
          button.btn.btn-primary(type="submit") Update Progress
            
    div.summary-card
      div.summary-header
        h3.summary-title Goal Summary
      div.summary-body
        ul.details-list
          li.details-item
            span.details-label Goal Status
            if goal.completed
              span.status-badge.status-completed Completed
            else if Math.ceil((new Date(goal.endDate) - new Date()) / (1000 * 60 * 60 * 24)) < 0
              span.status-badge.status-overdue Overdue
            else
              span.status-badge.status-progress In Progress
          
          li.details-item
            span.details-label Progress
            span.details-value #{Math.round(goal.progress)}%
            
          li.details-item
            span.details-label Current
            span.details-value #{goal.currentValue} #{goal.unit}
            
          li.details-item
            span.details-label Target
            span.details-value #{goal.targetValue} #{goal.unit}
  
  div.action-buttons(style="justify-content: center; margin-top: 2rem;")
    a.btn.btn-secondary(href="/goals") Back to All Goals 